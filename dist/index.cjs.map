{"version":3,"sources":["../src/index.ts","../package.json","../src/api/queries/user.ts","../src/api/mutations/user.ts","../src/api/queries/gpus.ts","../src/api/queries/pods.ts","../src/api/mutations/pods.ts","../src/api/api.ts"],"names":["import_axios","axios","status"],"mappings":"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","sourcesContent":["import axios, { AxiosResponse } from \"axios\"\r\nimport { curry, clamp, isNil } from \"ramda\"\r\n// @ts-ignore\r\nimport pkg from \"../package.json\"\r\n\r\nexport type ExecutionPolicy = {\r\n  ttl?: number\r\n  executionTimeout?: number\r\n}\r\nexport type S3Config = {\r\n  accessId: string\r\n  accessSecret: string\r\n  bucketName: string\r\n  endpointUrl: string\r\n  objectPath?: string\r\n}\r\nexport type EndpointInputPayload = {\r\n  input: any\r\n  webhook?: string\r\n  webhookV2?: string\r\n  s3Config?: S3Config\r\n  policy?: ExecutionPolicy\r\n}\r\nexport type EndpointIncompleteOutput = {\r\n  delayTime?: number\r\n  status: string\r\n  id: string\r\n}\r\nexport type EndpointCompletedOutput = {\r\n  status: string\r\n  id: string\r\n  output: any\r\n  executionTime: number\r\n  delayTime: number\r\n}\r\n\r\nexport type EndpointOutput = EndpointCompletedOutput | EndpointIncompleteOutput\r\n\r\nexport type EndpointStreamOutput = {\r\n  status: string\r\n  stream: [any]\r\n}\r\n\r\nexport type CancelOutput = {\r\n  status: string\r\n  id: string\r\n  executionTime: number\r\n  delayTime: number\r\n}\r\n\r\nexport type HealthCheck = {\r\n  jobs: { completed: number; failed: number; inProgress: number; inQueue: number; retried: number }\r\n  workers: { idle: number; initializing: number; ready: number; running: number; throttled: number }\r\n}\r\n\r\nexport type PurgeQueueOutput = {\r\n  removed: number\r\n  status: string\r\n}\r\n\r\nexport type SdkOptions = {\r\n  baseUrl: string\r\n}\r\n\r\nfunction getUserAgent() {\r\n  const sdkVersion = pkg.version;\r\n\r\n  let environmentInfo = 'Unknown Environment';\r\n\r\n  if (typeof window !== 'undefined' && window.navigator) {\r\n    environmentInfo = `Browser/${window.navigator.userAgent}`;\r\n  }\r\n\r\n  return `RunPod-JS-SDK/${sdkVersion} (${environmentInfo})`;\r\n}\r\n\r\nconst getAuthHeader = (apiKey: string) => ({\r\n  headers: {\r\n    \"Authorization\": `Bearer ${apiKey}`,\r\n        \"content-type\": \"application/json\",\r\n        \"User-Agent\": getUserAgent()\r\n  },\r\n})\r\nconst print = console.log\r\n\r\nconst handleErrors = async (axiosRequest: Promise<AxiosResponse>) => {\r\n  const resp = await axiosRequest\r\n  const { status, statusText } = resp\r\n  if (status !== 200) {\r\n    return { status, statusText }\r\n  }\r\n  return resp.data\r\n}\r\nconst handleErrorsStatus = async (axiosRequest: Promise<AxiosResponse>) => {\r\n  const resp = await axiosRequest\r\n  const { status, statusText } = resp\r\n  if (status !== 200) {\r\n    return { status, statusText, started: false }\r\n  }\r\n  return {\r\n    ...resp.data,\r\n    started: true,\r\n    completed: isCompleted(resp.data.status),\r\n    succeeded: resp.data.status === \"COMPLETED\",\r\n  }\r\n}\r\nexport const runpodServerlessBaseUrlProd = \"https://api.runpod.ai/v2\"\r\nexport const runpodServerlessBaseUrlDev = \"https://dev-api.runpod.ai/v2\"\r\nconst getEndpointUrl = curry((baseUrl, endpointId: string) => `${baseUrl}/${endpointId}`)\r\nconst isCompleted = (status: string) =>\r\n  [\"COMPLETED\", \"FAILED\", \"CANCELLED\", \"TIMED_OUT\"].includes(status)\r\n\r\n//run and then poll status\r\nexport const runSync = curry(\r\n  async (\r\n    baseUrl: string,\r\n    apiKey: string,\r\n    endpointId: string,\r\n    request: EndpointInputPayload,\r\n    timeout: number = 90000\r\n  ) => {\r\n    const startTime = Date.now()\r\n    const getRemainingTime = () => clamp(1000, 90000, timeout - (Date.now() - startTime))\r\n    const runResp: any = await runsync(baseUrl, apiKey, endpointId, request, timeout)\r\n    let data: EndpointOutput = { ...runResp }\r\n    const { id } = data\r\n    const start = Date.now()\r\n    while (!isCompleted(data.status)) {\r\n      if (Date.now() - start > timeout) {\r\n        print(`${id} timed out after ${timeout / 1000} seconds`)\r\n        return { ...data, started: true, completed: false }\r\n      }\r\n      data = await statusSync(baseUrl, apiKey, endpointId, id, getRemainingTime())\r\n      print(`${id}: ${data.status}`)\r\n    }\r\n    return { ...data, started: true, completed: true, succeeded: data.status === \"COMPLETED\" }\r\n  }\r\n)\r\n\r\n//wrapper over /status-sync\r\nconst statusSync = curry(\r\n  (\r\n    baseUrl: string,\r\n    apiKey: string,\r\n    endpointId: string,\r\n    requestId: String,\r\n    timeout: number = 90000\r\n  ) => {\r\n    const wait = clamp(1000, 90000, timeout)\r\n    const url = getEndpointUrl(baseUrl, endpointId) + \"/status-sync/\" + requestId + `?wait=${wait}`\r\n    const authHeader = getAuthHeader(apiKey)\r\n    return handleErrorsStatus(axios.get(url, { ...authHeader }))\r\n  }\r\n)\r\n\r\n//wrapper over /runsync\r\nconst runsync = curry(\r\n  (\r\n    baseUrl: string,\r\n    apiKey: string,\r\n    endpointId: string,\r\n    request: EndpointInputPayload,\r\n    timeout: number = 90000\r\n  ) => {\r\n    const wait = clamp(1000, 90000, timeout)\r\n    const url = getEndpointUrl(baseUrl, endpointId) + \"/runsync\" + `?wait=${wait}`\r\n    const authHeader = getAuthHeader(apiKey)\r\n    return handleErrorsStatus(axios.post(url, request, { ...authHeader }))\r\n  }\r\n)\r\n\r\n//wrapper over /run\r\nexport const run = curry(\r\n  (\r\n    baseUrl: string,\r\n    apiKey: string,\r\n    endpointId: string,\r\n    request: EndpointInputPayload,\r\n    timeout: number = 3000\r\n  ) => {\r\n    const url = getEndpointUrl(baseUrl, endpointId) + \"/run\"\r\n    const authHeader = getAuthHeader(apiKey)\r\n    return handleErrors(axios.post(url, request, { ...authHeader, timeout }))\r\n  }\r\n)\r\n//wrapper over /status\r\nexport const status = curry(\r\n  (\r\n    baseUrl: string,\r\n    apiKey: string,\r\n    endpointId: string,\r\n    requestId: string,\r\n    timeout: number = 3000\r\n  ) => {\r\n    const url = getEndpointUrl(baseUrl, endpointId) + \"/status/\" + requestId\r\n    const authHeader = getAuthHeader(apiKey)\r\n    return handleErrorsStatus(axios.get(url, { ...authHeader, timeout }))\r\n  }\r\n)\r\n\r\n//generator yielding results of stream\r\nexport async function* stream(\r\n  baseUrl: string,\r\n  apiKey: string,\r\n  endpointId: string,\r\n  requestId: string,\r\n  timeout: number = 0\r\n) {\r\n  let completed = false\r\n  const start = Date.now()\r\n  while (!completed) {\r\n    const url = getEndpointUrl(baseUrl, endpointId) + \"/stream/\" + requestId\r\n    const authHeader = getAuthHeader(apiKey)\r\n    const resp = await handleErrors(axios.get(url, authHeader))\r\n    if (timeout !== 0 && Date.now() - start > timeout) {\r\n      print(`stream timed out after ${timeout / 1000} seconds`)\r\n      completed = true\r\n    }\r\n    if (isCompleted(resp.status)) {\r\n      completed = true\r\n    }\r\n    for (const output of resp?.stream) {\r\n      yield output\r\n    }\r\n  }\r\n}\r\n\r\n//wrapper over /cancel\r\nconst cancel = curry(\r\n  (\r\n    baseUrl: string,\r\n    apiKey: string,\r\n    endpointId: string,\r\n    requestId: string,\r\n    timeout: number = 3000\r\n  ) => {\r\n    const url = getEndpointUrl(baseUrl, endpointId) + \"/cancel/\" + requestId\r\n    const authHeader = getAuthHeader(apiKey)\r\n    return handleErrors(axios.post(url, {}, { ...authHeader, timeout }))\r\n  }\r\n)\r\n//wrapper over /health\r\nexport const health = curry(\r\n  (baseUrl: string, apiKey: string, endpointId: string, timeout: number = 3000) => {\r\n    const url = getEndpointUrl(baseUrl, endpointId) + \"/health\"\r\n    const authHeader = getAuthHeader(apiKey)\r\n    return handleErrors(axios.get(url, { ...authHeader, timeout }))\r\n  }\r\n)\r\n//wrapper over /purge-queue\r\nexport const purgeQueue = curry(\r\n  (baseUrl: string, apiKey: string, endpointId: string, timeout: number = 3000) => {\r\n    const url = getEndpointUrl(baseUrl, endpointId) + \"/purge-queue\"\r\n    const authHeader = getAuthHeader(apiKey)\r\n    return handleErrors(axios.post(url, {}, { ...authHeader, timeout }))\r\n  }\r\n)\r\n\r\nclass Endpoint {\r\n  endpointId: string = \"\"\r\n  baseUrl: string = runpodServerlessBaseUrlProd\r\n  private apiKey: string = \"\"\r\n  constructor(baseUrl: string, apiKey: string, endpointId: string) {\r\n    this.baseUrl = baseUrl\r\n    this.apiKey = apiKey\r\n    this.endpointId = endpointId\r\n  }\r\n  async runSync(\r\n    request: EndpointInputPayload,\r\n    timeout: number = 90000\r\n  ): Promise<EndpointCompletedOutput> {\r\n    return runSync(this.baseUrl, this.apiKey, this.endpointId, request, timeout)\r\n  }\r\n  async run(\r\n    request: EndpointInputPayload,\r\n    timeout: number = 3000\r\n  ): Promise<EndpointIncompleteOutput> {\r\n    return run(this.baseUrl, this.apiKey, this.endpointId, request, timeout)\r\n  }\r\n  async status(requestId: string, timeout: number = 3000): Promise<EndpointOutput> {\r\n    return status(this.baseUrl, this.apiKey, this.endpointId, requestId, timeout)\r\n  }\r\n  async statusSync(requestId: string, timeout: number = 90000): Promise<EndpointOutput> {\r\n    return statusSync(this.baseUrl, this.apiKey, this.endpointId, requestId, timeout)\r\n  }\r\n  //default to no timeout\r\n  stream(requestId: string, timeout: number = 0): AsyncGenerator<any> {\r\n    return stream(this.baseUrl, this.apiKey, this.endpointId, requestId, timeout)\r\n  }\r\n  async cancel(requestId: string, timeout: number = 3000): Promise<CancelOutput> {\r\n    return cancel(this.baseUrl, this.apiKey, this.endpointId, requestId, timeout)\r\n  }\r\n  async health(timeout: number = 3000): Promise<HealthCheck> {\r\n    return health(this.baseUrl, this.apiKey, this.endpointId, timeout)\r\n  }\r\n  async purgeQueue(timeout: number = 3000): Promise<PurgeQueueOutput> {\r\n    return purgeQueue(this.baseUrl, this.apiKey, this.endpointId, timeout)\r\n  }\r\n}\r\n\r\nimport { RunPodApi } from \"./api/api\"\r\n\r\nconst defaultSdkOptions = {\r\n  baseUrl: runpodServerlessBaseUrlProd,\r\n}\r\nclass RunpodSdk {\r\n  private apiKey: string = \"\"\r\n  baseUrl: string = runpodServerlessBaseUrlProd\r\n  constructor(apiKey: string, options: SdkOptions) {\r\n    if (isNil(apiKey)) {\r\n      print(\"Api key not supplied\")\r\n      return\r\n    }\r\n    this.apiKey = apiKey\r\n    this.baseUrl = options.baseUrl ?? this.baseUrl\r\n  }\r\n  endpoint(endpointId: string) {\r\n    if (isNil(endpointId)) {\r\n      print(\"Endpoint id not supplied\")\r\n      return null\r\n    }\r\n    return new Endpoint(this.baseUrl, this.apiKey, endpointId)\r\n  }\r\n  //pod...\r\n  pod() {\r\n    return new RunPodApi(this.apiKey)\r\n  }\r\n  //template...\r\n}\r\nexport default (apiKey: string, options: SdkOptions = defaultSdkOptions) =>\r\n  new RunpodSdk(apiKey, options)\r\n","{\r\n  \"name\": \"runpod-sdk\",\r\n  \"version\": \"1.0.7\",\r\n  \"description\": \"JavaScript SDK for Runpod\",\r\n  \"exports\": {\r\n    \".\": {\r\n      \"import\": {\r\n        \"types\": \"./dist/index.d.ts\",\r\n        \"default\": \"./dist/index.js\"\r\n      },\r\n      \"require\": {\r\n        \"types\": \"./dist/index.d.cts\",\r\n        \"default\": \"./dist/index.cjs\"\r\n      },\r\n      \"default\": \"./dist/index.cjs\"\r\n    }\r\n  },\r\n  \"main\": \"dist/index.cjs\",\r\n  \"types\": \"dist/index.d.ts\",\r\n  \"module\": \"dist/index.js\",\r\n  \"type\": \"module\",\r\n  \"author\": \"Runpod\",\r\n  \"dependencies\": {\r\n    \"@actions/core\": \"^1.10.0\",\r\n    \"@actions/github\": \"^5.1.1\",\r\n    \"axios\": \"^1.6.8\",\r\n    \"dotenv\": \"^16.3.1\",\r\n    \"graphql\": \"^16.8.1\",\r\n    \"ramda\": \"^0.29.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@swc/core\": \"^1.4.13\",\r\n    \"@types/ramda\": \"^0.29.7\",\r\n    \"esm\": \"^3.2.25\",\r\n    \"tsup\": \"^8.0.2\",\r\n    \"typescript\": \"^5.2.2\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"tsc\"\r\n  }\r\n}\r\n","export const QUERY_USER: string = `\r\nquery myself {\r\n  myself {\r\n    id\r\n    pubKey\r\n    networkVolumes {\r\n      id\r\n      name\r\n      size\r\n      dataCenterId\r\n    }\r\n  }\r\n}\r\n`;","export function generateUserMutation(pubkey: string): string {\r\n  const escapedPubkey = pubkey.replace(/\\n/g, '\\\\n');\r\n  const inputFields: string[] = [`pubKey: \"${escapedPubkey}\"`];\r\n\r\n  // Format input fields\r\n  const inputString = inputFields.join(\", \");\r\n\r\n  return `\r\n  mutation {\r\n      updateUserSettings(\r\n          input: {\r\n              ${inputString}\r\n          }\r\n      ) {\r\n          id\r\n          pubKey\r\n      }\r\n  }\r\n  `;\r\n}\r\n\r\n// Example usage\r\n// const publicKey = `Your public\\nkey here`;\r\n// console.log(generateUserMutation(publicKey));","// Basic query to fetch available GPU types\r\nexport const QUERY_GPU_TYPES: string = `\r\nquery GpuTypes {\r\n  gpuTypes {\r\n    id\r\n    displayName\r\n    memoryInGb\r\n  }\r\n}\r\n`;\r\n\r\n// Function to generate a query for a specific GPU type\r\nexport const generateGpuQuery = (gpuId:string, gpuCount=1): string => {\r\n  return `\r\n    query GpuTypes {\r\n      gpuTypes(input: {id: \"${gpuId}\"}) {\r\n        maxGpuCount\r\n        id\r\n        displayName\r\n        manufacturer\r\n        memoryInGb\r\n        cudaCores\r\n        secureCloud\r\n        communityCloud\r\n        securePrice\r\n        communityPrice\r\n        oneMonthPrice\r\n        threeMonthPrice\r\n        oneWeekPrice\r\n        communitySpotPrice\r\n        secureSpotPrice\r\n        lowestPrice(input: {gpuCount: ${gpuCount}}) {\r\n          minimumBidPrice\r\n          uninterruptablePrice\r\n        }\r\n      }\r\n    }\r\n  `;\r\n}\r\n\r\n// // Example usage\r\n// console.log(generateGpuQuery({ gpuId: '12345', gpuCount: 2 }));","export const QUERY_POD = `\r\nquery myPods {\r\n    myself {\r\n        pods {\r\n            id\r\n            containerDiskInGb\r\n            costPerHr\r\n            desiredStatus\r\n            dockerArgs\r\n            dockerId\r\n            env\r\n            gpuCount\r\n            imageName\r\n            lastStatusChange\r\n            machineId\r\n            memoryInGb\r\n            name\r\n            podType\r\n            port\r\n            ports\r\n            uptimeSeconds\r\n            vcpuCount\r\n            volumeInGb\r\n            volumeMountPath\r\n            runtime {\r\n                ports{\r\n                    ip\r\n                    isIpPublic\r\n                    privatePort\r\n                    publicPort\r\n                    type\r\n                }\r\n            }\r\n            machine {\r\n                gpuDisplayName\r\n            }\r\n        }\r\n    }\r\n}`.replace(/\\n/g, \" \").replace(/\\s+/g, \" \");\r\n\r\nexport function generatePodQuery(podId: string): string {\r\n    return `\r\n    query pod {\r\n        pod(input: { podId: \"${podId}\" }) {\r\n            id\r\n            containerDiskInGb\r\n            costPerHr\r\n            desiredStatus\r\n            dockerArgs\r\n            dockerId\r\n            env\r\n            gpuCount\r\n            imageName\r\n            lastStatusChange\r\n            machineId\r\n            memoryInGb\r\n            name\r\n            podType\r\n            port\r\n            ports\r\n            uptimeSeconds\r\n            vcpuCount\r\n            volumeInGb\r\n            volumeMountPath\r\n            runtime {\r\n                ports {\r\n                    ip\r\n                    isIpPublic\r\n                    privatePort\r\n                    publicPort\r\n                    type\r\n                }\r\n            }\r\n            machine {\r\n                gpuDisplayName\r\n            }\r\n        }\r\n    }`;\r\n}\r\n","type PodDeploymentOptions = {\r\n  name: string;\r\n  imageName: string;\r\n  gpuTypeId: string;\r\n  cloudType?: string;\r\n  supportPublicIp?: boolean;\r\n  startSsh?: boolean;\r\n  dataCenterId?: string;\r\n  countryCode?: string;\r\n  gpuCount?: number;\r\n  volumeInGb?: number;\r\n  containerDiskInGb?: number;\r\n  minVcpuCount?: number;\r\n  minMemoryInGb?: number;\r\n  dockerArgs?: string;\r\n  ports?: string;\r\n  volumeMountPath?: string;\r\n  env?: Record<string, string>;\r\n  templateId?: string;\r\n  networkVolumeId?: string;\r\n  allowedCudaVersions?: string[];\r\n};\r\n\r\nexport function generatePodDeploymentMutation(options: PodDeploymentOptions): string {\r\n  let inputFields: string[] = [\r\n    `name: \"${options.name}\"`,\r\n    `imageName: \"${options.imageName}\"`,\r\n    `gpuTypeId: \"${options.gpuTypeId}\"`,\r\n  ];\r\n\r\n  // Default Fields\r\n  inputFields.push(`cloudType: ${options.cloudType || \"ALL\"}`);\r\n\r\n  inputFields.push(options.startSsh !== false ? 'startSsh: true' : 'startSsh: false');\r\n  inputFields.push(options.supportPublicIp !== false ? 'supportPublicIp: true' : 'supportPublicIp: false');\r\n\r\n  // Optional Fields\r\n  if (options.dataCenterId) {\r\n    inputFields.push(`dataCenterId: \"${options.dataCenterId}\"`);\r\n  }\r\n  if (options.countryCode) {\r\n    inputFields.push(`countryCode: \"${options.countryCode}\"`);\r\n  }\r\n  if (options.gpuCount) {\r\n    inputFields.push(`gpuCount: ${options.gpuCount}`);\r\n  }\r\n  if (options.volumeInGb) {\r\n    inputFields.push(`volumeInGb: ${options.volumeInGb}`);\r\n  }\r\n  if (options.containerDiskInGb) {\r\n    inputFields.push(`containerDiskInGb: ${options.containerDiskInGb}`);\r\n  }\r\n  if (options.minVcpuCount) {\r\n    inputFields.push(`minVcpuCount: ${options.minVcpuCount}`);\r\n  }\r\n  if (options.minMemoryInGb) {\r\n    inputFields.push(`minMemoryInGb: ${options.minMemoryInGb}`);\r\n  }\r\n  if (options.dockerArgs) {\r\n    inputFields.push(`dockerArgs: \"${options.dockerArgs}\"`);\r\n  }\r\n  if (options.ports) {\r\n    const cleanedPorts = options.ports.replace(\" \", \"\");\r\n    inputFields.push(`ports: \"${cleanedPorts}\"`);\r\n  }\r\n  if (options.volumeMountPath) {\r\n    inputFields.push(`volumeMountPath: \"${options.volumeMountPath}\"`);\r\n  }\r\n  if (options.env) {\r\n    const envString = Object.entries(options.env)\r\n      .map(([key, value]) => `{ key: \"${key}\", value: \"${value}\"}`)\r\n      .join(', ');\r\n    inputFields.push(`env: [${envString}]`);\r\n  }\r\n  if (options.templateId) {\r\n    inputFields.push(`templateId: \"${options.templateId}\"`);\r\n  }\r\n  if (options.networkVolumeId) {\r\n    inputFields.push(`networkVolumeId: \"${options.networkVolumeId}\"`);\r\n  }\r\n  if (options.allowedCudaVersions) {\r\n    const allowedCudaVersionsString = options.allowedCudaVersions.map(version => `\"${version}\"`).join(', ');\r\n    inputFields.push(`allowedCudaVersions: [${allowedCudaVersionsString}]`);\r\n  }\r\n\r\n  const inputString = inputFields.join(', ');\r\n\r\n  return `\r\n    mutation {\r\n      podFindAndDeployOnDemand(\r\n        input: {\r\n          ${inputString}\r\n        }\r\n      ) {\r\n        id\r\n        desiredStatus\r\n        imageName\r\n        env\r\n        machineId\r\n        machine {\r\n          podHostId\r\n        }\r\n      }\r\n    }\r\n  `;\r\n}\r\n\r\nexport function generatePodStopMutation(podId: string): string {\r\n  return `\r\n    mutation {\r\n      podStop(input: { podId: \"${podId}\" }) {\r\n        id\r\n        desiredStatus\r\n      }\r\n    }\r\n  `;\r\n}\r\n\r\nexport function generatePodResumeMutation(podId: string, gpuCount: number): string {\r\n  return `\r\n    mutation {\r\n      podResume(input: { podId: \"${podId}\", gpuCount: ${gpuCount} }) {\r\n        id\r\n        desiredStatus\r\n        imageName\r\n        env\r\n        machineId\r\n        machine {\r\n          podHostId\r\n        }\r\n      }\r\n    }\r\n  `;\r\n}\r\n\r\nexport function generatePodTerminateMutation(podId: string): string {\r\n  return `\r\n    mutation {\r\n      podTerminate(input: { podId: \"${podId}\" })\r\n    }\r\n  `;\r\n}","import * as userQueries from './queries/user';\r\nimport * as userMutations from './mutations/user'\r\nimport * as gpus from './queries/gpus';\r\nimport * as podQueries from './queries/pods';\r\nimport * as podMutations from './mutations/pods';\r\n\r\ninterface Env {\r\n    [key: string]: string;\r\n}\r\n\r\nimport axios, { AxiosError } from \"axios\";\r\n\r\nconst HTTP_STATUS_UNAUTHORIZED = 401;\r\n\r\ninterface GraphQLResponse {\r\n  data?: any;\r\n  errors?: {\r\n    message: string;\r\n  }[];\r\n}\r\n\r\nclass AuthenticationError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = \"AuthenticationError\";\r\n  }\r\n}\r\n\r\nclass QueryError extends Error {\r\n  constructor(message: string, query: string) {\r\n    super(`${message} - while processing query: ${query}`);\r\n    this.name = \"QueryError\";\r\n  }\r\n}\r\n\r\ntype Pod = {\r\n  name: string;\r\n  imageName: string;\r\n  gpuTypeId: string;\r\n  cloudType?: string;\r\n  supportPublicIp?: boolean;\r\n  startSsh?: boolean;\r\n  dataCenterId?: string;\r\n  countryCode?: string;\r\n  gpuCount?: number;\r\n  volumeInGb?: number;\r\n  containerDiskInGb?: number;\r\n  minVcpuCount?: number;\r\n  minMemoryInGb?: number;\r\n  dockerArgs?: string;\r\n  ports?: string;\r\n  volumeMountPath?: string;\r\n  env?: { [key: string]: string };\r\n  templateId?: string;\r\n  networkVolumeId?: string;\r\n  allowedCudaVersions?: string[];\r\n};\r\n\r\nexport class RunPodApi {\r\n  public apiKey: string;\r\n\r\n  constructor(apiKey: string) {\r\n    this.apiKey = apiKey;\r\n  }\r\n\r\n  async runGraphqlQuery(query: string): Promise<any> {\r\n    const url = `https://api.runpod.io/graphql?api_key=${this.apiKey}`;\r\n  \r\n    const headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      \"User-Agent\": \"RunPodClient/1.0\", // Replace 'RunPodClient/1.0' with your actual User-Agent\r\n    };\r\n  \r\n    const data = { query };\r\n\r\n    return axios.post(url, data, { headers, timeout: 30000 })\r\n      .then(response => {\r\n        return response.data;\r\n      })\r\n      .catch((error: AxiosError) => {\r\n        if (error.response && error.response.status === HTTP_STATUS_UNAUTHORIZED) {\r\n          throw new AuthenticationError(\"Unauthorized request, please check your API key.\");\r\n        }\r\n  \r\n        if (error.response) {\r\n          const jsonResponse = error.response.data as GraphQLResponse;\r\n          if (jsonResponse && jsonResponse.errors && jsonResponse.errors.length > 0) {\r\n            throw new QueryError(jsonResponse.errors[0].message, query);\r\n          }\r\n        }\r\n  \r\n        // Preserve axios's original error if not handled above\r\n        throw error;\r\n      });\r\n  }\r\n  \r\n  async getUser(): Promise<any> {\r\n    const rawResponse = await this.runGraphqlQuery(userQueries.QUERY_USER);\r\n    const cleanedResponse = rawResponse.data.myself;\r\n    return cleanedResponse;\r\n  }\r\n\r\n  async updateUserSettings(pubkey: string): Promise<any> {\r\n    const rawResponse = await this.runGraphqlQuery(userMutations.generateUserMutation(pubkey));\r\n    const cleanedResponse = rawResponse.data.updateUserSettings;\r\n    return cleanedResponse;\r\n  }\r\n\r\n  async getGpus(): Promise<any> {\r\n    const rawResponse = await this.runGraphqlQuery(gpus.QUERY_GPU_TYPES);\r\n    const cleanedResponse = rawResponse.data.gpuTypes;\r\n    return cleanedResponse;\r\n  }\r\n\r\n  async getGpu(gpuId: string, gpuQuantity = 1): Promise<any> {\r\n    const rawResponse = await this.runGraphqlQuery(gpus.generateGpuQuery(gpuId, gpuQuantity));\r\n    const cleanedResponse = rawResponse.data.gpuTypes;\r\n    if (cleanedResponse.length < 1) {\r\n      throw new Error(\"No GPU found with the specified ID, run getGpus() to get a list of all GPUs\");\r\n    }\r\n    return cleanedResponse[0];\r\n  }\r\n\r\n  async getPods(): Promise<any> {\r\n    const rawResponse = await this.runGraphqlQuery(podQueries.QUERY_POD);\r\n    const cleanedResponse = rawResponse.data.myself.pods;\r\n    return cleanedResponse;\r\n  }\r\n\r\n  async getPod(podId: string): Promise<any> {\r\n    const rawResponse = await this.runGraphqlQuery(podQueries.generatePodQuery(podId));\r\n    return rawResponse.data.pod;\r\n  }\r\n\r\n  async createPod({\r\n      name,\r\n      imageName,\r\n      gpuTypeId,\r\n      cloudType = \"ALL\",\r\n      supportPublicIp = false,\r\n      startSsh = false,\r\n      dataCenterId = undefined,\r\n      countryCode = undefined,\r\n      gpuCount = 1,\r\n      volumeInGb = 10,\r\n      containerDiskInGb = undefined,\r\n      minVcpuCount = 1,\r\n      minMemoryInGb = 1,\r\n      dockerArgs = \"\",\r\n      ports = undefined,\r\n      volumeMountPath = \"\",\r\n      env = undefined,\r\n      templateId = undefined,\r\n      networkVolumeId = undefined,\r\n      allowedCudaVersions = [],\r\n  }:Pod): Promise<any> {\r\n      // Input Validation\r\n      await this.getGpu(gpuTypeId);  // Check if GPU exists, will throw Error if not.\r\n\r\n      if (![\"ALL\", \"COMMUNITY\", \"SECURE\"].includes(cloudType)) {\r\n          throw new Error(\"cloudType must be one of ALL, COMMUNITY or SECURE\");\r\n      }\r\n\r\n      if (networkVolumeId && !dataCenterId) {\r\n          const userInfo = await this.getUser();\r\n          for (const networkVolume of userInfo.networkVolumes) {\r\n              if (networkVolume.id === networkVolumeId) {\r\n                  dataCenterId = networkVolume.dataCenterId;\r\n                  break;\r\n              }\r\n          }\r\n      }\r\n\r\n      if (containerDiskInGb === null && templateId === null) {\r\n          containerDiskInGb = 10;\r\n      }\r\n\r\n      const rawResponse = await this.runGraphqlQuery(\r\n          podMutations.generatePodDeploymentMutation({\r\n              name,\r\n              imageName,\r\n              gpuTypeId,\r\n              cloudType,\r\n              supportPublicIp,\r\n              startSsh,\r\n              dataCenterId,\r\n              countryCode,\r\n              gpuCount,\r\n              volumeInGb,\r\n              containerDiskInGb,\r\n              minVcpuCount,\r\n              minMemoryInGb,\r\n              dockerArgs,\r\n              ports,\r\n              volumeMountPath,\r\n              env,\r\n              templateId,\r\n              networkVolumeId,\r\n              allowedCudaVersions,\r\n          })\r\n      );\r\n\r\n      const cleanedResponse = rawResponse.data.podFindAndDeployOnDemand;\r\n      return cleanedResponse;\r\n  }\r\n\r\n  async stopPod(podId: string): Promise<any> {\r\n    const rawResponse = await this.runGraphqlQuery(podMutations.generatePodStopMutation(podId));\r\n    const cleanedResponse = rawResponse.data.podStop;\r\n    return cleanedResponse;\r\n  }\r\n\r\n  async resumePod(podId: string, gpuCount: number): Promise<any> {\r\n    const rawResponse = await this.runGraphqlQuery(podMutations.generatePodResumeMutation(podId, gpuCount));\r\n    const cleanedResponse = rawResponse.data.podResume;\r\n    return cleanedResponse;\r\n  }\r\n}"]}